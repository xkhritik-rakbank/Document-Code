import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

public class LogFileUtility {

    public static void main(String[] args) {
        // Prevent multiple instances
        FileLock lock = acquireLock();
        if (lock == null) {
            System.err.println("Another instance is already running. Exiting...");
            return;
        }

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                if (lock != null) {
                    lock.release();
                    System.out.println("Lock released.");
                }
            } catch (IOException e) {
                System.err.println("Error releasing lock: " + e.getMessage());
            }
        }));

        List<String> directories = loadDirectoriesFromProperties("D:\\Custom_utility\\sLogSweep\\config.properties");

        if (directories.isEmpty()) {
            System.out.println("No directories found in the properties file.");
            return;
        }

        while (true) {
            File root = new File("/");
            long freeSpace = root.getFreeSpace();
            long totalSpace = root.getTotalSpace();
            double freeSpacePercentage = (double) freeSpace / totalSpace * 100;

            if (freeSpacePercentage < 10) {
                for (String directoryPath : directories) {
                    File directory = new File(directoryPath);
                    if (directory.exists() && directory.isDirectory()) {
                        List<File> foldersToDelete = new ArrayList<>();
                        collectFoldersToDelete(directory, foldersToDelete);

                        if (!foldersToDelete.isEmpty()) {
                            System.out.println("The following folders contain .log and .xml files larger than 1.5MB and will be deleted:");
                            for (final File folder : foldersToDelete) {
                                System.out.println(folder.getAbsolutePath());
                                new Thread(() -> deleteFolder(folder)).start();
                            }
                        } else {
                            System.out.println("No folders with .log files larger than 1.5MB found in: " + directoryPath);
                        }
                    } else {
                        System.out.println("Directory does not exist or is not a directory: " + directoryPath);
                    }
                }

                // Also handle process folder cleanup
                List<String> cleanupPaths = loadDocCleanupPathsFromProperties("D:\\Custom_utility\\sLogSweep\\config.properties");
                for (String path : cleanupPaths) {
                    cleanupProcessFolders(path);
                }
            } else {
                System.out.println("Disk space is above the threshold. No action taken.");
            }

            try {
                Thread.sleep(720000); // 2 hours
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    // ------------------------ Existing methods below -----------------------

    private static List<String> loadDirectoriesFromProperties(String propertiesFilePath) {
        List<String> directories = new ArrayList<>();
        try (FileInputStream input = new FileInputStream(propertiesFilePath)) {
            Properties prop = new Properties();
            prop.load(input);
            String dirs = prop.getProperty("directories");
            if (dirs != null) {
                for (String dir : dirs.split(",")) {
                    directories.add(dir.trim());
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading properties file: " + e.getMessage());
        }
        return directories;
    }

    private static void collectFoldersToDelete(File directory, List<File> foldersToDelete) {
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                boolean shouldDeleteFolder = false;
                for (File file : files) {
                    if (file.isDirectory()) {
                        collectFoldersToDelete(file, foldersToDelete);
                    } else if ((file.getName().matches("(?i).*\\.log.*") || file.getName().matches("(?i).*\\.xml.*"))
                            && file.length() > 1.5 * 1024 * 1024 && !isModifiedTodayOrYesterday(file)) {
                        shouldDeleteFolder = true;
                    }
                }
                if (shouldDeleteFolder) {
                    foldersToDelete.add(directory);
                }
            }
        }
    }

    private static boolean isModifiedTodayOrYesterday(File file) {
        Calendar calendar = Calendar.getInstance();
        Date today = calendar.getTime();
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        Date yesterday = calendar.getTime();
        Date fileDate = new Date(file.lastModified());

        return isSameDay(today, fileDate) || isSameDay(yesterday, fileDate);
    }

    private static boolean isSameDay(Date date1, Date date2) {
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date1);
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
                && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
    }

    private static void deleteFolder(File folder) {
        if (folder.isDirectory()) {
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    deleteFolder(file);
                }
            }
        }
        if (!folder.delete()) {
            System.err.println("Failed to delete: " + folder.getAbsolutePath());
        } else {
            System.out.println("Deleted: " + folder.getAbsolutePath());
        }
    }

    // ------------------------ New Methods Added -----------------------

    private static FileLock acquireLock() {
        try {
            File lockFile = new File("D:\\Custom_utility\\sLogSweep\\log_utility.lock");
            lockFile.createNewFile();
            FileChannel channel = new RandomAccessFile(lockFile, "rw").getChannel();
            FileLock lock = channel.tryLock();
            if (lock == null) {
                channel.close();
                return null;
            }
            return lock;
        } catch (IOException e) {
            System.err.println("Failed to acquire lock: " + e.getMessage());
            return null;
        }
    }

    private static List<String> loadDocCleanupPathsFromProperties(String propertiesFilePath) {
        List<String> paths = new ArrayList<>();
        try (FileInputStream input = new FileInputStream(propertiesFilePath)) {
            Properties prop = new Properties();
            prop.load(input);
            String dirs = prop.getProperty("doc_cleanup_paths");
            if (dirs != null) {
                for (String dir : dirs.split(",")) {
                    if (!dir.trim().isEmpty()) {
                        paths.add(dir.trim());
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading properties file: " + e.getMessage());
        }
        return paths;
    }

    private static void cleanupProcessFolders(String rootPath) {
        File root = new File(rootPath);
        if (root.exists() && root.isDirectory()) {
            File[] dirs = root.listFiles(File::isDirectory);
            if (dirs != null) {
                for (File dir : dirs) {
                    if (dir.getName().toLowerCase().contains("process")) {
                        if (isFolderOld(dir, 30)) {
                            System.out.println("Deleting process folder: " + dir.getAbsolutePath());
                            deleteFolder(dir);
                        }
                    }
                }
            }
        }
    }

    private static boolean isFolderOld(File folder, int days) {
        long cutoff = System.currentTimeMillis() - (long) days * 24 * 60 * 60 * 1000;
        return isFolderOrContentsOlderThan(folder, cutoff);
    }

    private static boolean isFolderOrContentsOlderThan(File file, long cutoff) {
        if (file.lastModified() > cutoff) return false;

        File[] children = file.listFiles();
        if (children != null) {
            for (File child : children) {
                if (!isFolderOrContentsOlderThan(child, cutoff)) {
                    return false;
                }
            }
        }
        return true;
    }
}
