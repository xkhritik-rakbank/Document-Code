// Create a trust manager that doesn't validate certificate chains
TrustManager[] trustAllCerts = new TrustManager[] {
    new X509TrustManager() {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        
        public void checkClientTrusted(X509Certificate[] certs, String authType) {
            // No validation
        }
        
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
            // No validation
        }
    }
};

// Install the all-trusting trust manager
try {
    SSLContext sc = SSLContext.getInstance("TLS");
    sc.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    
    // Create all-trusting host name verifier
    HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    };
    
    // Install the all-trusting host verifier
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    
    // Now proceed with your URL connection
    URL url = new URL("https://your-api-endpoint.com");
    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
    // Rest of your connection code
} catch (Exception e) {
    e.printStackTrace();
}