import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

public class LogFileUtility {

    public static void main(String[] args) {
        // Load directories from properties file
        List<String> directories = loadDirectoriesFromProperties("D:/sLogSweep/config.properties");

        if (directories.isEmpty()) {
            System.out.println("No directories found in the properties file.");
            return;
        }

        Scanner scanner = new Scanner(System.in);

        for (String directoryPath : directories) {
            File directory = new File(directoryPath);
            if (directory.exists() && directory.isDirectory()) {
                // Collect folders to delete
                List<File> foldersToDelete = new ArrayList<>();
                collectFoldersToDelete(directory, foldersToDelete);

                if (!foldersToDelete.isEmpty()) {
                    System.out.println("The following folders contain .log and .xml files larger than 2MB:");
                    for (File folder : foldersToDelete) {
                        System.out.println(folder.getAbsolutePath());
                    }

                    // Ask user confirmation before deleting
                    System.out.print("Do you want to delete these folders? (yes/no): ");
                    String userInput = scanner.nextLine();

                    if ("yes".equalsIgnoreCase(userInput)) {
                        // Delete folders
                        for (File folder : foldersToDelete) {
                            deleteFolder(folder);
                        }
                    } else {
                        System.out.println("No folders were deleted.");
                    }
                } else {
                    System.out.println("No folders with .log files larger than 2MB found in: " + directoryPath);
                }
            } else {
                System.out.println("Directory does not exist or is not a directory: " + directoryPath);
            }
        }

        // Do not close scanner here

        // Prompt user to press any key to exit
        System.out.println("Press Enter to exit...");
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static List<String> loadDirectoriesFromProperties(String propertiesFilePath) {
        List<String> directories = new ArrayList<>();
        try (FileInputStream input = new FileInputStream(propertiesFilePath)) {
            Properties prop = new Properties();
            prop.load(input);
            String dirs = prop.getProperty("directories");
            if (dirs != null) {
                for (String dir : dirs.split(",")) {
                    directories.add(dir.trim());
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading properties file: " + e.getMessage());
        }
        return directories;
    }

    private static void collectFoldersToDelete(File directory, List<File> foldersToDelete) {
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                boolean shouldDeleteFolder = false;
                for (File file : files) {
                    if (file.isDirectory()) {
                        collectFoldersToDelete(file, foldersToDelete);
                    } else if ((file.getName().matches("(?i).*\\.log.*") || file.getName().matches("(?i).*\\.xml.*"))
                            && file.length() > 2 * 1024 * 1024 && !isModifiedTodayOrYesterday(file)) { // Check size > 2MB and modification date
                        shouldDeleteFolder = true;
                    }
                }
                if (shouldDeleteFolder) {
                    foldersToDelete.add(directory);
                }
            }
        }
    }

    private static boolean isModifiedTodayOrYesterday(File file) {
        Calendar calendar = Calendar.getInstance();
        
        // Get today's date
        Date today = calendar.getTime();

        // Get yesterday's date
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        Date yesterday = calendar.getTime();

        // Get file's last modified date
        Date fileDate = new Date(file.lastModified());

        // Check if the file was modified today or yesterday
        return isSameDay(today, fileDate) || isSameDay(yesterday, fileDate);
    }

    private static boolean isSameDay(Date date1, Date date2) {
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date1);
        
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);

        return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
                && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
    }

    private static void deleteFolder(File folder) {
        if (folder.isDirectory()) {
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    deleteFolder(file);
                }
            }
        }
        if (!folder.delete()) {
            System.err.println("Failed to delete: " + folder.getAbsolutePath());
        } else {
            System.out.println("Deleted: " + folder.getAbsolutePath());
        }
    }
}