import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;

public class test {
    public static void main(String[] args) {
        try {
        	
            // Read HTML content from the file
            String htmlFilePath = "D:\\Learning\\Dev\\dmo\\index4.html";
            // new file
            
            String html = new String(Files.readAllBytes(Paths.get(htmlFilePath)));

            String arr[] = {"a~b~c~d", "e~f~g~h"};
            html = html.replaceAll("#replaceEntityTable#", addRows(arr));
            
            String arr2[] = {"i~j~k~l", "m~n~o~p"};
            html = html.replaceAll("#replaceAnnexureTable#", addRows(arr2));
            
            
            // Convert image to Base64
            String base64Image = encodeImageToBase64("C:\\Users\\varun-k\\eclipse-workspace\\Aiwayi\\assets\\KYC_template_assets\\rak-header_entity.PNG");
            
            // Replace placeholder with Base64 image string
            html = html.replace("toReplaceSrcEntity", "data:image/png;base64," + base64Image);
            
            // Convert image to Base64
            String base64Image2 = encodeImageToBase64("C:\\Users\\varun-k\\eclipse-workspace\\Aiwayi\\assets\\KYC_template_assets\\rak-header_annexure.PNG");
            
            // Replace placeholder with Base64 image string
            html = html.replace("toReplaceSrcAnnexure", "data:image/png;base64," + base64Image2); // 
            
            
            // Debug: Print the modified HTML content to console
            System.out.println(html);
            
            // Output PDF file
            OutputStream pdfOS = new FileOutputStream(new File("output.pdf"));

            PdfRendererBuilder builder = new PdfRendererBuilder();
            builder.withHtmlContent(html, new File(htmlFilePath).getParentFile().toURI().toString());
            builder.toStream(pdfOS);
            builder.run();

            pdfOS.close();
            System.out.println("PDF created successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static String addRows(String arr[]) {
    	
    	StringBuilder sb = new StringBuilder();
    	for(int i=0; i<arr.length; i++) {
    		sb.append("<tr>");
    		
    		String subArr[] = arr[i].split("~");
    		for(int j=0; j<subArr.length; j++) {
    			sb.append("<td>");
    			
    			sb.append(subArr[j]);
    			
    			sb.append("</td>");
    		}
    		
    		sb.append("</tr>");
    	}
    	
    	
    	return sb.toString();
    }
    
    public static String encodeImageToBase64(String imagePath) throws Exception {
        File file = new File(imagePath);
        FileInputStream imageInFile = new FileInputStream(file);
        byte[] imageData = new byte[(int) file.length()];
        imageInFile.read(imageData);
        imageInFile.close();
        return Base64.getEncoder().encodeToString(imageData);
    }
}
